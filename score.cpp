//=============================================================================
//
// バレット処理 [.cpp] 
// Author : AKIRA TANAKA
//
//=============================================================================
#include "score.h"
#include "manager.h"
#include "number.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define SCORE_POS_X (1260)
#define SCORE_POS_Y (100)

//*****************************************************************************
// 静的変数
//*****************************************************************************
//int CScore::m_nScore = 0;

//=============================================================================
// 
//=============================================================================
CScore::CScore()
{
	m_nScore = 0;
	m_pos = D3DXVECTOR3(0.0f,0.0f,0.0f);
}

//=============================================================================
// 
//=============================================================================
CScore::~CScore()
{

}

//=============================================================================
// 
//=============================================================================
HRESULT CScore::Init(void)
{
	//数字の生成
	CNumber *pNumber;

	//数字の生成
	for(int i = 0 ; i < SCORE_MAX ; i++)
	{
		m_apNumber[i] = pNumber->Create(D3DXVECTOR3(m_pos.x + i * -60,m_pos.y,0));

	}

	return S_OK;
}

HRESULT CScore::Init( D3DXVECTOR3 pos , int value)
{
	//数字の生成
	CNumber *pNumber;

	m_pos = pos;
	m_nScore = value;

	//数字の生成
	for(int i = 0 ; i < SCORE_MAX ; i++)
	{
		m_apNumber[i] = pNumber->Create(D3DXVECTOR3(m_pos.x + i * -60,m_pos.y,0));

	}

	return S_OK;
}

//=============================================================================
// 
//=============================================================================
void CScore::Uninit(void)
{
	for(int i = 0 ; i < SCORE_MAX ; i++)
	{
		m_apNumber[i]->Uninit();
	}
}

//=============================================================================
// 
//=============================================================================
void CScore::Update(void)
{
	//変数の宣言
	int value , number;

	//データの受け渡し
	value = m_nScore;

	for(int i = 0 ; i < SCORE_MAX ; i++)
	{
		//数字の更新処理
		m_apNumber[i]->Update();

		//１の桁を取り出す
		number	=	value %10;

		//桁のずらし
		value	/=	10;

		//スコアの更新
		m_apNumber[i]->SetNumber(number);
	}
}

//=============================================================================
// 
//=============================================================================
void CScore::Draw(void)
{
	for(int i = 0 ; i < SCORE_MAX ; i++)
	{
		//数字の描画
		m_apNumber[i]->Draw();
	}

}

//=============================================================================
// 
//=============================================================================
CScore *CScore::Create(D3DXVECTOR3 pos, int nValue)
{
	//変数の宣言
	CScore *pScore;
	
	//初期化処理
	pScore = new CScore;
	pScore->Init(pos,nValue);

	pScore->SetPos(nValue,pos);

	//先頭アドレスを返す
	return pScore;
}

//=============================================================================
// 
//=============================================================================
void CScore::AddScore(int Value)
{
	//加算処理
	m_nScore = m_nScore + Value;

}

void CScore::SetPos(int nValue, D3DXVECTOR3 pos)
{
	m_nScore = nValue;
	m_pos = pos;
}

//=============================================================================
// スコアの数値を返す
//=============================================================================
int CScore::GetScore(void)
{
	//数値を返す
	return m_nScore;
}

//=============================================================================
// 
//=============================================================================
void CScore::SetPosition(D3DXVECTOR3 pos)
{
	m_pos = pos;
}

//=============================================================================
// 
//=============================================================================
D3DXVECTOR3 CScore::GetPosition(void)
{
	return m_pos;
}

//=============================================================================
// 
//=============================================================================
float CScore::GetLength(void)
{
	return m_fLength;
}